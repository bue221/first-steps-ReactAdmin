{"version":3,"sources":["Photos.js","users.js","App.js","serviceWorker.js","index.js"],"names":["PreviewImage","record","source","ImageField","PostList","props","List","Datagrid","TextField","ReferenceField","reference","title","EditButton","PostEdit","Edit","SimpleForm","ReferenceInput","SelectInput","optionText","TextInput","disabled","FileInput","label","accept","PhotoList","PhotoEdit","placeholder","UserList","rowClick","EmailField","dataProvider","jsonServerProvider","App","Admin","Resource","name","list","edit","ListGuesser","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b5ac1d16.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { List, Datagrid, TextField, ReferenceField, EditButton, Edit, SimpleForm,ReferenceInput, SelectInput, TextInput , FileInput, FileField, Create, ImageField } from 'react-admin';\n\nconst PreviewImage = ({ record, source }) => {\n   if (typeof record == \"string\") {\n     record = {\n       [source]: `${record}`,\n     };\n  }\n   return <ImageField record={record} source={source} />;\n};\n\n\n\nexport const PostList = props => (\n    <List {...props}>\n        <Datagrid> \n            <TextField source=\"id\" />\n            <ReferenceField source=\"userId\" reference=\"users\"><TextField source=\"name\" /></ReferenceField>\n            <TextField source=\"title\" />\n            <ImageField source=\"body\" title=\"body\" />\n            <EditButton />\n        </Datagrid>\n    </List>\n);\n\nexport const PostEdit = props => (\n    <Edit {...props}>\n        <SimpleForm>\n            <ReferenceInput source=\"userId\" reference=\"users\"><SelectInput optionText=\"name\" /></ReferenceInput>\n            <TextInput disabled source=\"id\" />\n            <TextInput source=\"title\" />\n            <FileInput source=\"body\" label=\"Related files\" accept=\".jpg .png\">\n              <ImageField source=\"src\" title=\"body\" />\n            </FileInput>\n        </SimpleForm>\n    </Edit>\n);\n\nexport const PostCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <ReferenceInput source=\"userId\" reference=\"users\">\n                <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <TextInput source=\"title\" />\n            <FileInput source=\"body\" label=\"Related files\" accept=\"application/pdf\" placeholder={<p>Drop your file here</p>}>\n    <ImageField source=\"body\" title=\"body.title\" />\n</FileInput>\n        </SimpleForm>\n    </Create>\n);\n\nexport const PhotoList = props => (\n    <List {...props}>\n        <Datagrid>\n            <ReferenceField source=\"albumId\" reference=\"albums\"><TextField source=\"id\" /></ReferenceField>\n            <TextField source=\"id\" />\n            <TextField source=\"title\" />\n            <PreviewImage source={ \"url\" ? \"url\" : \"src\"} />\n            <TextField source=\"thumbnailUrl\" />\n            <EditButton />\n        </Datagrid>\n    </List>\n);\n\nexport const PhotoEdit = props => (\n    <Edit {...props}>\n        <SimpleForm>\n            <ReferenceInput source=\"albumId\" reference=\"albums\"><SelectInput optionText=\"id\" /></ReferenceInput>\n            <TextInput source=\"id\" />\n            <TextInput source=\"title\" />\n            <FileInput source=\"url\" label=\"Related files\" accept=\".png\" placeholder={<p>Drop your file here</p>}>\n    <PreviewImage source=\"src\"/>\n</FileInput>\n            <TextInput source=\"thumbnailUrl\" />\n        </SimpleForm>\n    </Edit>\n);\n","import * as React from \"react\";\nimport { List, Datagrid, TextField, EmailField } from 'react-admin';\n\nexport const UserList = props => (\n    <List {...props}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <TextField source=\"username\" />\n            <EmailField source=\"email\" />\n            <TextField source=\"address.street\" />\n            <TextField source=\"phone\" />\n            <TextField source=\"website\" />\n            <TextField source=\"company.name\" />\n        </Datagrid>\n    </List>\n);\n","import * as React from \"react\";\nimport { Admin, Resource, EditGuesser , ListGuesser} from 'react-admin';\nimport { PostList, PostEdit, PostCreate, PhotoList, PhotoEdit } from './Photos';\nimport jsonServerProvider from 'ra-data-json-server';\nimport { UserList } from './users';\n\nconst dataProvider = jsonServerProvider('https://jsonplaceholder.typicode.com');\n\nconst App = ()=>{\n        return(\n                <Admin dataProvider={dataProvider}>\n                        <Resource name=\"posts\" list={PostList} edit={PostEdit}/>\n                        <Resource name=\"users\" list={UserList} />\n                        <Resource name=\"albums\" list={ListGuesser} />\n                        <Resource name=\"photos\" list={PhotoList} edit={PhotoEdit} />\n                </Admin>\n        );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}